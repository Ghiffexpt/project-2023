# MJPEG Streaming
#
# This example shows off how to do MJPEG streaming to a FIREFOX webrowser
# Chrome, Firefox and MJpegViewer App on Android have been tested.
# Connect to the IP address/port printed out from ifconfig to view the stream.
import sensor, image, time, network, socket, sys, audio
from ulab import numpy as np
from ulab import scipy as sp

SSID='Data Pusaka 2.4'      # Network SSID
KEY='admin.admin'       # Network key
HOST ='172.16.2.72'     # Use first available interface
PORT = 8080  # Arbitrary non-privileged port
CHANNELS = 1
SIZE = 256//(2*CHANNELS)

raw_buf = None
# Init sensor
sensor.reset()
sensor.set_framesize(sensor.VGA)
sensor.set_pixformat(sensor.RGB565)
audio.init(channels=CHANNELS, frequency=16000, gain_db=24, highpass=0.9883)

# Init wlan module and connect to network
print("Trying to connect... (This may take a while)...")
wlan = network.WLAN(network.STA_IF)
wlan.deinit()
wlan.active(True)
wlan.connect(SSID, KEY, timeout=30000)

# We should have a valid IP now via DHCP
print("WiFi Connected ", wlan.ifconfig())

# Create server socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)


# Bind and listen
s.connect([HOST, PORT])


def audio_callback(buf):
    # NOTE: do Not call any function that allocates memory.
    global raw_buf
    if (raw_buf == None):
        raw_buf = buf

audio.start_streaming(audio_callback)

def start_streaming(s):
    print ('Waiting for connections..')
    # set client socket timeout to 5s


    # Read request from client
    #data = client.recv(1024)
    # Should parse client request here
    client = s;
    #client.send("HTTP/1.1 200 OK\r\n" \
                #"Server: OpenMV\r\n" \
                #"Content-Type: multipart/x-mixed-replace;boundary=openmv\r\n" \
                #"Cache-Control: no-cache\r\n" \
                #"Pragma: no-cache\r\n\r\n")

    # FPS clock
    clock = time.clock()

    # Start streaming images
    # NOTE: Disable IDE preview to increase streaming FPS.
    while (True):
        clock.tick() # Track elapsed milliseconds between snapshots().
        frame = sensor.snapshot()
        cframe = frame.compressed(quality=35)
        header = "\r\n--openmv\r\n" \
                 "Content-Type: image/jpeg\r\n"\
                 "Content-Length:"+str(cframe.size())+"\r\n\r\n"
        client.send(header)
        client.send(cframe)
        print(clock.fps())
        
while (True):
    try:
        start_streaming(s)
    except OSError as e:
        print("socket error: ", e)
        audio.stop_streaming()

        #sys.print_exception(e)
